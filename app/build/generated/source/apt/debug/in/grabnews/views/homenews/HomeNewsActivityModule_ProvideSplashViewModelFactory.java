// Generated by Dagger (https://google.github.io/dagger).
package in.grabnews.views.homenews;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import in.grabnews.data.DataManager;
import in.grabnews.utils.rx.SchedulerProvider;
import javax.inject.Provider;

public final class HomeNewsActivityModule_ProvideSplashViewModelFactory
    implements Factory<HomeNewsViewModel> {
  private final HomeNewsActivityModule module;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  public HomeNewsActivityModule_ProvideSplashViewModelFactory(
      HomeNewsActivityModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    this.module = module;
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public HomeNewsViewModel get() {
    return Preconditions.checkNotNull(
        module.provideSplashViewModel(dataManagerProvider.get(), schedulerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static HomeNewsActivityModule_ProvideSplashViewModelFactory create(
      HomeNewsActivityModule module,
      Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    return new HomeNewsActivityModule_ProvideSplashViewModelFactory(
        module, dataManagerProvider, schedulerProvider);
  }

  public static HomeNewsViewModel proxyProvideSplashViewModel(
      HomeNewsActivityModule instance,
      DataManager dataManager,
      SchedulerProvider schedulerProvider) {
    return Preconditions.checkNotNull(
        instance.provideSplashViewModel(dataManager, schedulerProvider),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
