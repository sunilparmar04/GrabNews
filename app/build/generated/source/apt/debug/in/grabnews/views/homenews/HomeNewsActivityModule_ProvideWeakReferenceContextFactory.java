// Generated by Dagger (https://google.github.io/dagger).
package in.grabnews.views.homenews;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.lang.ref.WeakReference;
import javax.inject.Provider;

public final class HomeNewsActivityModule_ProvideWeakReferenceContextFactory
    implements Factory<WeakReference<HomeNewsActivity>> {
  private final HomeNewsActivityModule module;

  private final Provider<HomeNewsActivity> activityProvider;

  public HomeNewsActivityModule_ProvideWeakReferenceContextFactory(
      HomeNewsActivityModule module, Provider<HomeNewsActivity> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public WeakReference<HomeNewsActivity> get() {
    return Preconditions.checkNotNull(
        module.provideWeakReferenceContext(activityProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static HomeNewsActivityModule_ProvideWeakReferenceContextFactory create(
      HomeNewsActivityModule module, Provider<HomeNewsActivity> activityProvider) {
    return new HomeNewsActivityModule_ProvideWeakReferenceContextFactory(module, activityProvider);
  }

  public static WeakReference<HomeNewsActivity> proxyProvideWeakReferenceContext(
      HomeNewsActivityModule instance, HomeNewsActivity activity) {
    return Preconditions.checkNotNull(
        instance.provideWeakReferenceContext(activity),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
